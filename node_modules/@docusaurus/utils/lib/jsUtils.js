"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.reportMessage = exports.findAsyncSequential = exports.mapAsyncSequential = exports.getElementsAround = exports.removePrefix = exports.removeSuffix = void 0;
const tslib_1 = require("tslib");
const logger_1 = tslib_1.__importDefault(require("@docusaurus/logger"));
function removeSuffix(str, suffix) {
    if (suffix === '') {
        return str; // always returns "" otherwise!
    }
    return str.endsWith(suffix) ? str.slice(0, -suffix.length) : str;
}
exports.removeSuffix = removeSuffix;
function removePrefix(str, prefix) {
    return str.startsWith(prefix) ? str.slice(prefix.length) : str;
}
exports.removePrefix = removePrefix;
function getElementsAround(array, aroundIndex) {
    const min = 0;
    const max = array.length - 1;
    if (aroundIndex < min || aroundIndex > max) {
        throw new Error(`Valid "aroundIndex" for array (of size ${array.length}) are between ${min} and ${max}, but you provided ${aroundIndex}.`);
    }
    const previous = aroundIndex === min ? undefined : array[aroundIndex - 1];
    const next = aroundIndex === max ? undefined : array[aroundIndex + 1];
    return { previous, next };
}
exports.getElementsAround = getElementsAround;
async function mapAsyncSequential(array, action) {
    const results = [];
    for (const t of array) {
        const result = await action(t);
        results.push(result);
    }
    return results;
}
exports.mapAsyncSequential = mapAsyncSequential;
async function findAsyncSequential(array, predicate) {
    for (const t of array) {
        if (await predicate(t)) {
            return t;
        }
    }
    return undefined;
}
exports.findAsyncSequential = findAsyncSequential;
function reportMessage(message, reportingSeverity) {
    switch (reportingSeverity) {
        case 'ignore':
            break;
        case 'log':
            logger_1.default.info(message);
            break;
        case 'warn':
            logger_1.default.warn(message);
            break;
        case 'error':
            logger_1.default.error(message);
            break;
        case 'throw':
            throw new Error(message);
        default:
            throw new Error(`Unexpected "reportingSeverity" value: ${reportingSeverity}.`);
    }
}
exports.reportMessage = reportMessage;
//# sourceMappingURL=jsUtils.js.map